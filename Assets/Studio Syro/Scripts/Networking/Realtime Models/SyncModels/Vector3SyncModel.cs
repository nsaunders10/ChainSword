using Normal.Realtime;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class Vector3SyncModel
{
    [RealtimeProperty(1, true, true)]
    private Vector3 _vector3Value;


}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class Vector3SyncModel : RealtimeModel {
    public UnityEngine.Vector3 vector3Value {
        get {
            return _vector3ValueProperty.value;
        }
        set {
            if (_vector3ValueProperty.value == value) return;
            _vector3ValueProperty.value = value;
            InvalidateReliableLength();
            FireVector3ValueDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(Vector3SyncModel model, T value);
    public event PropertyChangedHandler<UnityEngine.Vector3> vector3ValueDidChange;
    
    public enum PropertyID : uint {
        Vector3Value = 1,
    }
    
    #region Properties
    
    private ReliableProperty<UnityEngine.Vector3> _vector3ValueProperty;
    
    #endregion
    
    public Vector3SyncModel() : base(null) {
        _vector3ValueProperty = new ReliableProperty<UnityEngine.Vector3>(1, _vector3Value);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _vector3ValueProperty.UnsubscribeCallback();
    }
    
    private void FireVector3ValueDidChange(UnityEngine.Vector3 value) {
        try {
            vector3ValueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _vector3ValueProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _vector3ValueProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Vector3Value: {
                    changed = _vector3ValueProperty.Read(stream, context);
                    if (changed) FireVector3ValueDidChange(vector3Value);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _vector3Value = vector3Value;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
